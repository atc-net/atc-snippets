param (
  [Parameter(Mandatory = $false)]
  [ValidateNotNullOrEmpty()]
  [ValidateSet('DevTest', 'Production')]
  [string]
  $environmentType = "DevTest",

  [Parameter(Mandatory = $true)]
  [ValidateNotNullOrEmpty()]
  [string]
  $environmentName
)

#############################################################################################
# Provision WebApi Service
#############################################################################################
Write-Host "Provision WebApi Service" -ForegroundColor DarkGreen

Write-Host "  Create web app" -ForegroundColor DarkYellow
$output = az webapp create `
  --name $apiName `
  --resource-group $resourceGroupName `
  --plan $appServicePlanId `
  --tags $resourceTags

Throw-WhenError -output $output

Write-Host "  Configure web app" -ForegroundColor DarkYellow
$output = az webapp config set `
 --name $apiName `
 --resource-group $resourceGroupName `
 --min-tls-version '1.2' `
 --use-32bit-worker-process false

Throw-WhenError -output $output

Write-Host "  Allow cross-origin resource sharing (CORS)" -ForegroundColor DarkYellow

$output = az webapp cors remove `
  --name $apiName `
  --resource-group $resourceGroupName `
  --allowed-origins *

Throw-WhenError -output $output

$output = az webapp cors add `
  --name $apiName `
  --resource-group $resourceGroupName `
  --allowed-origins *

Throw-WhenError -output $output

Write-Host "  Apply web app settings" -ForegroundColor DarkYellow
$output = az webapp config appsettings set `
 --name $apiName `
 --resource-group $resourceGroupName `
 --settings `
   ApplicationInsights__InstrumentationKey=$instrumentationKey `
   APPINSIGHTS_INSTRUMENTATIONKEY=$instrumentationKey `
   ServiceOptions__EnvironmentName=$environmentName `
   ServiceOptions__EnvironmentType=$environmentType

Throw-WhenError -output $output

Write-Host "  Grant web app access to key vault" -ForegroundColor DarkYellow
$appPrincipalId = az webapp identity assign `
  --name $apiName `
  --resource-group $resourceGroupName `
  --query principalId

Throw-WhenError -output $appPrincipalId

$output = az keyvault set-policy `
  --name $keyVaultName `
  --resource-group $resourceGroupName `
  --object-id $appPrincipalId `
  --secret-permissions list get

Throw-WhenError -output $output