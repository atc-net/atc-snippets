# Allow dynamic install of extensions to be able to use az databricks commands
az config set extension.use_dynamic_install=yes_without_prompt

###############################################################################################
# Provision Databricks Workspace resources
###############################################################################################
Write-Host "Provision Databricks Workspace" -ForegroundColor DarkGreen

Write-Host "  Checking if already exists" -ForegroundColor DarkYellow
$dbWorkspace = (az databricks workspace list --query "[?name == '$($databricksName)']") | ConvertFrom-Json

If ($dbWorkspace.Count -eq 0) {
  Write-Host "  Deploying Databricks template" -ForegroundColor DarkYellow
  $output = az deployment group create `
    --resource-group $resourceGroupName `
    --template-file "arm-templates/databricks-workspace.json" `
    --parameters workspaceName=$databricksName

  Throw-WhenError -output $output
}

Write-Host "  Tagging Databricks Workspace" -ForegroundColor DarkYellow
$output = az resource tag `
  --resource-group $resourceGroupName `
  --name $databricksName `
  --resource-type "Microsoft.Databricks/workspaces" `
  --tags $resourceTags

Throw-WhenError -output $output

$resourceId = az resource show `
  --resource-group $resourceGroupName `
  --name $databricksName `
  --resource-type "Microsoft.Databricks/workspaces" `
  --query id
$resourceId = $resourceId.Replace('"','')

Throw-WhenError -output $resourceId

$workspaceUrl = az resource show `
  --resource-group $resourceGroupName `
  --name $databricksName `
  --resource-type "Microsoft.Databricks/workspaces" `
  --query properties.workspaceUrl
$workspaceUrl = $workspaceUrl.Replace('"','')

Throw-WhenError -output $workspaceUrl


###############################################################################################
# Initialize Databricks
###############################################################################################
Write-Host "Initialize Databricks Configuration" -ForegroundColor Green

Write-Host "  Install Databricks CLI" -ForegroundColor DarkYellow
pip install --upgrade pip --quiet
pip install --upgrade databricks-cli --quiet

Write-Host "  Add the SPN to the Databricks Workspace as an admin user" -ForegroundColor DarkYellow
$accessToken = Set-DatabricksSpnAdminUser `
  -tenantId $tenantId `
  -clientId $clientId `
  -clientSecret (ConvertFrom-SecureString $clientSecret -AsPlainText) `
  -workspaceUrl $workspaceUrl `
  -resourceId $resourceId

Write-Host "  Generate SPN personal access token" -ForegroundColor DarkYellow
$token = ConvertTo-DatabricksPersonalAccessToken `
  -workspaceUrl $workspaceUrl `
  -bearerToken $accessToken

Write-Host "  Generate .databrickscfg" -ForegroundColor DarkYellow
Set-Content ~/.databrickscfg "[DEFAULT]"
Add-Content ~/.databrickscfg "host = https://$workspaceUrl"
Add-Content ~/.databrickscfg "token = $token"
Add-Content ~/.databrickscfg ""

Write-Host "  Get Databricks Cluster" -ForegroundColor Green

$clusterId = Get-DatabricksCluster -clusterName "Default"
Throw-WhenError -output $clusterId

Write-Host "##vso[task.setvariable variable=DatabricksToken;issecret=true]$token"
Write-Host "##vso[task.setvariable variable=WorkspaceUrl;issecret=false]$workspaceUrl"
Write-Host "##vso[task.setvariable variable=ClusterId;issecret=false]$clusterId"


###############################################################################################
# Setup Databricks-Connect
###############################################################################################
Write-Host "Setup Databricks-Connect" -ForegroundColor Green

Write-Host "  Configure databricks-connect" -ForegroundColor DarkYellow
@{
  host = "https://$workspaceUrl"
  token = $token
  cluster_id = $clusterId
  org_id = "XXXXXX"
  port = "15001"
} | ConvertTo-Json | Set-Content ~/.databricks-connect

Write-Host "  Running databricks-connect test" -ForegroundColor DarkYellow
databricks-connect test